spring:
  application:
    name: orders-api
  profiles:
    active: local

  jackson:
    constructor-detector: default
    property-naming-strategy: LOWER_CAMEL_CASE
    # ignore null properties in the serialization, similar to @JsonInclude(JsonInclude.Include.NON_NULL)
    default-property-inclusion: non_null
    deserialization:
      # Throw an exception if an unknown propriety arrives in the request body, the default value is false
      fail-on-unknown-properties: true
      # throw an exception if a property annotated with @JsonIgnore arrives in the request body, the default value is false
      fail-on-ignored-properties: true
    serialization:
      fail-on-empty-beans: true
      fail-on-self-references: true
      indent-output: true


  web:
    resources:
      # this only works when we don't have any static resource for example some website
      add-mappings: false
  mvc:
    log-request-details: true
    log-resolved-exception: true

---
spring:
  config:
    activate:
      on-profile: local
  kafka:
    template:
      default-topic: orders-events
    producer:
      bootstrap-servers: localhost:9092
      # key-serializer: org.apache.kafka.common.serialization.IntegerSerializer
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      properties:
        acks: all
        # Allowing retries while setting enable.idempotence to false and max.in.flight.requests.per.connection to 1 will potentially change the ordering of records because if two batches are sent to a single partition, and the first fails and is retried but the second succeeds, then the records in the second batch may appear first.
        retries: 5
        # The amount of time to wait before attempting to retry a failed request to a given topic partition. This avoids repeatedly sending requests in a tight loop under some failure scenarios.
        retry.backoff.ms: 1000
        enable.idempotence: true
    admin:
      properties:
        bootstrap-servers: localhost:9092

logging:
  level:
    root: info
    org.springframework: debug
    io.github.jlmc: debug

---
spring:
  config:
    activate:
      on-profile: dev
  kafka:
    template:
      default-topic: orders-events
    producer:
      bootstrap-servers: kafka-dev1:9092,kafka-dev2:9092,kafka-dev3:9092
      # key-serializer: org.apache.kafka.common.serialization.IntegerSerializer
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      properties:
        acks: all
        enable.idempotence: true
        retries: 5


---
spring:
  config:
    activate:
      on-profile: prod

  kafka:
    template:
      default-topic: orders-events
    producer:
      bootstrap-servers: kafka1:9092,kafka2:9092,kafka3:9092
      # key-serializer: org.apache.kafka.common.serialization.IntegerSerializer
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      properties:
        acks: all
        enable.idempotence: true
        retries: 5
