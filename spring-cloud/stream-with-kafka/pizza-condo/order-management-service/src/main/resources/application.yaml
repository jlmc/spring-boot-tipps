#spring.application.name=order-management-service

spring:
  application:
    name: order-management-service

  mvc:
    log-request-details: true

  datasource:
    url: jdbc:postgresql://localhost:5432/pizza_condo_db
    username: postgres
    password: postgres
    hikari:
      maximum-pool-size: 10
      minimum-idle: 5
      idle-timeout: 10000
      auto-commit: false
      schema: order_management
  jpa:
    properties:
      hibernate:
        connection:
          autocommit: false
        generate_statistics: true
        format_sql: true
        default_schema: ${spring.datasource.hikari.schema}
        order_updates: true
        query:
          in_clause_parameter_padding: true
          plan_cache_max_size: 4096
    open-in-view: false
    show-sql: false
    hibernate:
      ddl-auto: none
  flyway:
    enabled: true
    baseline-on-migrate: true
    baseline-version: 0.0.0_0
    default-schema: ${spring.datasource.hikari.schema}
    validate-migration-naming: true

## could
  # # spring.cloud.function.definition
  cloud:
    stream:
      function:
        definition: orderValidatedProcessor
      kafka:
        binder:
          brokers: localhost:9092
        bindings:
          orderReceived-out-0:
            producer:
              configuration:
                key.serializer: org.apache.kafka.common.serialization.StringSerializer
          orderAccepted-out-0:
            producer:
              configuration:
                key.serializer: org.apache.kafka.common.serialization.StringSerializer
          orderValidatedProcessor-in-0:
            consumer:
              enable-dlq: true
              dlq-name: order-validated-events-dlq
      bindings:
        orderReceived-out-0:
          destination: order-received-events
        orderAccepted-out-0:
          destination: order-accepted-events
        orderValidatedProcessor-in-0:
          destination: order-validated-events
          group: ${spring.application.name}




#   cloud:
#    stream:
#      function.definition: validateOrderProcessor;
#      kafka:
#        binder:
#          brokers: kafka1:9092
#        bindings:
#          validateOrderProcessor-in-0:
#            consumer:
#              enableDlq: true
#              dlqName: order-received-events-dlq
#          validateOrderProcessor-out-0:
#            producer.configuration:
#              key.serializer: org.apache.kafka.common.serialization.StringSerializer
#      bindings:
#        validateOrderProcessor-in-0:
#          destination: order-received-events
#          group: ${spring.application.name}
#        validateOrderProcessor-out-0:
#          destination: order-validated-events







###   cloud.stream:
#    function.definition: planeArrivedProcessor;flightArrivedConsumer
#    kafka:
#      bindings:
#        planeArrivedProcessor-in-0:
#          consumer:
#            enableDlq: true
#            dlqName: plane-arrived-dlq-v1
#        flightArrivedConsumer-in-0:
#          consumer:
#            enableDlq: true
#            dlqName: flight-arrived-dlq-v1
#        planeArrivedProcessor-out-0:
#          producer.configuration:
#            key.serializer: org.apache.kafka.common.serialization.StringSerializer
#    bindings:
#      planeArrivedProcessor-in-0:
#        destination: plane-arrived-v1
#        group: flight-api
#        consumer:
#          retryable-exceptions:
#            com.henriquels25.flightapi.plane.infra.stream.NoFlightFoundException: false
#      planeArrivedProcessor-out-0:
#        destination: flight-arrived-v1
#      flightArrivedConsumer-in-0:
#        destination: flight-arrived-v1
#        group: flight-api
#      orderReceived-out-0:
#        destination: flight-finished-v1



###
# logging
logging:
  level:
    root: info
    io:
      github:
        jlmc: debug
    org:
      springframework:
        web: debug
      hibernate: info
      hibernate.SQL: debug
      hibernate.type.descriptor.sql: trace
      hibernate.type.descriptor.sql.BasicBinder: trace
      hibernate.type.descriptor.sql.BasicExtractor: trace
      hibernate.engine.transaction.internal.TransactionImpl: debug
      hibernate.engine.jdbc.batch: debug
      hibernate.stat: debug
      hibernate.SQL_SLOW: info
      hibernate.orm.jdbc.bind: trace
      hibernate.orm.jdbc.extract: trace
      flywaydb: debug
    com:
      zaxxer.hikari: debug


