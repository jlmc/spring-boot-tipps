######
# BatchSettings
hibernate.jdbc.batch_size=200
hibernate.order_updates=true
hibernate.order_inserts=true
hibernate.query.fail_on_pagination_over_collection_fetch=true
hibernate.query.in_clause_parameter_padding=true
hibernate.query.plan_cache_max_size=4096

## IMPORTANT NOTE:
## The property: hibernate.id.db_structure_naming_strategy
## needs to have the value legacy in order to keep the compatibility with the hibernate audit events
## https://docs.jboss.org/hibernate/orm/6.0/migration-guide/migration-guide.html#id-sequence-table-name
## https://jpa-buddy.com/blog/hibernate6-whats-new-and-why-its-important/
## https://thorben-janssen.com/sequence-naming-strategies-in-hibernate-6/
## The allowed values: "single, legacy, standard
#hibernate.id.db_structure_naming_strategy=legacy
## IN ALTERNATIVE,
## we can create the sequences that new hibernate strategy (Hibernate standard) uses:
## <code>
## create sequence stagemanagement.revinfo_seq increment [1|50];
## select setval('stagemanagement.revinfo_seq', (select pg_sequence_last_value('stagemanagement.hibernate_sequence')));
## </code>
## We need to take into account that, in Hibernate, the default increment of sequences is 50,
##  so we may have to make an adjustment if we decide to use a different increment value.
## @see org.hibernate.cfg.AvailableSettings.SEQUENCE_INCREMENT_SIZE_MISMATCH_STRATEGY
## @see org.hibernate.id.SequenceMismatchStrategy.FIX
## The Fix value behave as following. When detecting a mismatch,
## Hibernate tries to fix it by overriding the entity sequence mapping using the one found in the database.
## EXCEPTION, LOG, FIX, NONE
# hibernate.id.sequence.increment_size_mismatch_strategy=FIX